'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _util;

function _load_util() {
  return (_util = _interopRequireDefault(require('util')));
}

var _chalk;

function _load_chalk() {
  return (_chalk = _interopRequireDefault(require('chalk')));
}

var _prettyFormat;

function _load_prettyFormat() {
  return (_prettyFormat = _interopRequireDefault(require('pretty-format')));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
      arr2[i] = arr[i];
    return arr2;
  } else {
    return Array.from(arr);
  }
} /**
 * Copyright (c) 2018-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

const EXPECTED_COLOR = (_chalk || _load_chalk()).default.green;
const RECEIVED_COLOR = (_chalk || _load_chalk()).default.red;
const SUPPORTED_PLACEHOLDERS = /%[sdifjoO%]/g;

exports.default = cb =>
  function() {
    for (
      var _len = arguments.length, args = Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      args[_key] = arguments[_key];
    }

    return function eachBind(title, test) {
      if (args.length === 1) {
        const table = args[0].every(Array.isArray)
          ? args[0]
          : args[0].map(entry => [entry]);
        return table.forEach(row =>
          cb(
            arrayFormat.apply(
              undefined,
              [title].concat(_toConsumableArray(row))
            ),
            applyRestParams(row, test)
          )
        );
      }

      const templateStrings = args[0];
      const data = args.slice(1);

      const keys = getHeadingKeys(templateStrings[0]);
      const table = buildTable(data, keys.length, keys);

      if (data.length % keys.length !== 0) {
        const error = new Error(
          'Not enough arguments supplied for given headings:\n' +
            EXPECTED_COLOR(keys.join(' | ')) +
            '\n\n' +
            'Received:\n' +
            RECEIVED_COLOR(
              (0, (_prettyFormat || _load_prettyFormat()).default)(data)
            ) +
            '\n\n' +
            `Missing ${RECEIVED_COLOR(
              `${data.length % keys.length}`
            )} arguments`
        );

        if (Error.captureStackTrace) {
          Error.captureStackTrace(error, eachBind);
        }

        return cb(title, () => {
          throw error;
        });
      }

      return table.forEach(row =>
        cb(interpolate(title, row), applyObjectParams(row, test))
      );
    };
  };

const arrayFormat = function(str) {
  for (
    var _len2 = arguments.length,
      args = Array(_len2 > 1 ? _len2 - 1 : 0),
      _key2 = 1;
    _key2 < _len2;
    _key2++
  ) {
    args[_key2 - 1] = arguments[_key2];
  }

  const matches = (str.match(SUPPORTED_PLACEHOLDERS) || []).length;
  return (_util || _load_util()).default.format.apply(
    (_util || _load_util()).default,
    [str].concat(_toConsumableArray(args.slice(0, matches)))
  );
};

const applyRestParams = (params, test) => {
  if (params.length < test.length)
    return done =>
      test.apply(undefined, _toConsumableArray(params).concat([done]));

  return () => test.apply(undefined, _toConsumableArray(params));
};

const getHeadingKeys = headings => headings.replace(/\s/g, '').split('|');

const buildTable = (data, rowSize, keys) =>
  Array.from({length: data.length / rowSize})
    .map((_, index) => data.slice(index * rowSize, index * rowSize + rowSize))
    .map(row =>
      row.reduce(
        (acc, value, index) => Object.assign({}, acc, {[keys[index]]: value}),
        {}
      )
    );

const interpolate = (title, data) =>
  Object.keys(data).reduce(
    (acc, key) => acc.replace('$' + key, data[key]),
    title
  );

const applyObjectParams = (obj, test) => {
  if (test.length > 1) return done => test(obj, done);

  return () => test(obj);
};
